
'''

一·命名空间
1.内置命名空间：
     ①就是python解释器一启动就可以使用的名字存储在内置命名空间中
     ②内置的名字在启动解释器的时候被加载进内存里
     ③在内置:不能使用局部和全局的名字的

2.全局命名空间：
     ①是在程序从上到下被执行的过程中依次加载进内存的
     ②放置了我们设置的所有变量名和函数名
     ③在全局:可以使用内置命名空间中的名字，但是不能用局部中使用

3.局部命名空间：
     ①函数内部定义的名字
     ②当调用函数的时候 才会产生这个名称空间 随着函数执行的结束 这个命名空间就又消失了
     ③在局部:可以使用全局、内置命名空间中的名字

'''

# 在全局定义和内置命名同名时，会使用全局的名字
# 即自己有先用自己的，没找到再往一层找，类推最后内置空间也没有就报错。
# def input():
#     print('你瞎搞！！！')
#
# def func():
#     return input
#
# func()()

# 二。作用域两种：
# 1.全局作用域 —— 作用在全局 —— 内置和全局名字空间中的名字都属于全局作用域 ——globals()
# 2.局部作用域 —— 作用在局部 —— 函数（局部名字空间中的名字属于局部作用域） ——locals()

# 不可变数据类型 在局部可查看全局作用域中的变量,但是不能直接修改。
# 如果要修改，需在程序的开始声明：global
# 在局部（函数）内声明了global 变量，则在局部中的变量所有操作将对对全局有效。

a = 0
def func():
    global a                       # 声明：global a,即可以操作，未声明会报错
    a += 10
    b = 222
    print('局部作用域:', locals())   # 查看局部空间作用域
    print('全局作用域:', globals())  # 查看全局空间作用域

print('声明前:', a)                 # 未调用声明函数前
func()
print('声明后', a)                  # 调用声明的函数后

